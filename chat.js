/* Generated by Babel */
//// chat.js is the transpiled (ES5) version

// Helper Functions
"use strict";

function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Talk = function Talk(text) {
  document.getElementById("input").value = text;document.getElementById("sayit-button").click();
};
var _Data = function _Data(text, instance) {
  return text.replace(/\$([A-Za-z$_]+[A-Za-z$_0-9]*)/g, function (_, v) {
    return instance[v];
  });
};

var Chatbot = function Chatbot(Name, _x, onmessage) {
  if (Name === undefined) Name = "a Chatbot";

  var _this = this;

  var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var _ref$Startup = _ref.Startup;
  var Startup = _ref$Startup === undefined ? "Hi my name is $Name!" : _ref$Startup;
  var _ref$UID = _ref.UID;
  var UID = _ref$UID === undefined ? 0 : _ref$UID;

  _classCallCheck(this, Chatbot);

  this.Name = Name;
  this.Options = { Startup: _Data(Startup, this), UID: UID };
  this.onmessage = onmessage || function () {
    return void 0;
  };

  this.Queue = [];
  // Private
  var Called = Symbol("Called");

  this[Called] = new Set();

  // Startup
  Talk(this.Options.Startup);

  // Read
  setInterval(function () {
    [].concat(_toConsumableArray(document.getElementsByClassName("message"))).filter(function (message, index, transcript) {
      if (_this[Called].has(message)) return false;else _this[Called].add(message);
      return (message.parentElement.parentElement.className.match(/user-(\d+)/) || [0, UID])[1] != UID && index > transcript.map(function (t) {
        return t.textContent.trim();
      }).lastIndexOf(_this.Options.Startup);
    }).forEach(function (message) {
      return _this.onmessage.call({
        "Text": message.textContent.trim().replace(/([A-Za-z]+\.)+(?:com|org|net|xyz)/g, "http://$&"),
        "HTML": message.innerHTML,
        "Raw": message,
        "User": message.parentElement.parentElement.getElementsByClassName("username")[0].textContent.trim(),

        // Special Functions
        "Speak": function Speak(Text) {
          return _this.Queue.push(Text);
        },
        "Reply": function Reply(Text) {
          return _this.Queue.push(":" + message.id.split("-")[1] + " " + Text);
        },
        "Data": function Data(Text) {
          return _Data(Text, _this);
        },

        // Other
        "super": _this
      });
    });
  }, 2100);

  setInterval(function () {
    return _this.Queue[0] && Talk(_this.Queue.shift());
  }, 1000);
}

/*
 * CHATGOAT v2.0
**/
;

var Admins = new Set(["Doᴡɴɢᴏᴀᴛ", "Chatgoat"]);

var Commands = {
  "help": function help(args) {
    return Object.keys(Commands).join(", ");
  },
  "learn": function learn(args, c) {
    return (Commands[args[0]] = function () {
      return _Data(args.slice(1).join(" "), c);
    }, "Learned how to " + args[0] + "!");
  }
};

var Chatgoat = new Chatbot("Chatgoat", { UID: 180858, Startup: "Hello! My name is $Name!" }, function () {
  if (this.Text[0] === "/") {
    // Command

    var _Arguments = Arguments = this.Text.split(" ");

    var _Arguments2 = _toArray(_Arguments);

    var Command = _Arguments2[0];

    var Arguments = _Arguments2.slice(1);

    this.Speak(Commands[Command.slice(1)](Arguments, this));
  } else {
    if (/(Hello|Hi|Hey)(?=[^A-Za-z]|$)/i.test(this.Text)) {
      this.Reply("Hello " + this.User + "!");
    }
  }
});

// EXTRA FUNCTIONS

Commands["golf"] = function (args) {
  var len = Math.floor(Math.random() * args.join(" ").length * .5) + 1;
  return Array(len).fill().map(function () {
    return String.fromCharCode(Math.floor(Math.random() * 1200 + 255));
  }).join("") + " is only " + (Math.floor(Math.random() * (len - 1)) + 1) + " bytes in the " + Array(Math.floor(Math.random() * 2) + 2).fill().map(function () {
    return String.fromCharCode(Math.floor(Math.random() * 25) + 65);
  }).join("") + "-" + Math.floor(Math.random() * Math.pow(10, Math.floor(Math.random() * 4) + 2)) + " encoding";
};